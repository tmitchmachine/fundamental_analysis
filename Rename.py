def get_user_input(prompt):
    while True:
        try:
            value = float(input(prompt))
            return value
        except ValueError:
            print("Invalid input. Please enter a number.")

def calculate_intrinsic_value(future_cash_flows, discount_rate):
    """
    Calculates the intrinsic value of a stock using the discounted cash flow (DCF) method.

    Args:
        future_cash_flows (list): List of future cash flows generated by the stock.
        discount_rate (float): Discount rate used to discount future cash flows.

    Returns:
        float: The intrinsic value of the stock, or 0 if EPS is 0.
    """

    try:
        intrinsic_value = 0
        for year, cash_flow in enumerate(future_cash_flows):
            present_value = cash_flow / ((1 + discount_rate) ** (year + 1))
            intrinsic_value += present_value
        return intrinsic_value
    except ZeroDivisionError:  # Handle case where EPS is 0
        return 0

def calculate_rating(current_price, eps, book_value, total_debt, operating_cash_flow, dividend_yield, market_cap, roe):
    # Assign weights to different metrics (adjust as needed)
    price_to_earnings_ratio = current_price / eps
    price_to_book_ratio = current_price / book_value
    debt_to_equity_ratio = total_debt / market_cap  # Assuming market cap represents equity
    cash_flow_to_price_ratio = operating_cash_flow / market_cap

    # Basic scoring system (can be more complex)
    rating = 0

    # Intrinsic Value vs. Current Price
    try:
        intrinsic_value = calculate_intrinsic_value([eps * 5], 0.1)  # Simplified DCF with 5 years of earnings growth at 10% discount rate
        if current_price < intrinsic_value:
            rating += 3  # Stock trading below intrinsic value is good
    except ValueError:  # Handle cases where EPS is 0
        pass

    # Earnings Yield vs. Bond Yield (consider user input for bond yield)
    earnings_yield = eps / current_price
    bond_yield = float(input("Enter the current 10-year bond yield (%): "))
    if earnings_yield > bond_yield:
        rating += 2  # Higher earnings yield compared to bond yield is attractive

    # Return on Equity (ROE)
    if roe > 0.15:
        rating += 1  # Higher ROE suggests good profitability

    # Debt Levels
    if debt_to_equity_ratio < 0.5:
        rating += 1  # Lower debt-to-equity is generally better

    # Competitive Advantage (Moat) - user needs to consider this qualitatively
    print("\n**Competitive Advantage (Moat):**")
    print("Consider the following factors and rate the company's competitive advantage from 1 (weak) to 5 (strong):")  # Fixed missing quotation mark here
    print("- Strong brand recognition")
    print("- Switching costs for customers")
    print("- Cost advantages")
    print("- Network effects")
    print("- Intangible assets (e.g., patents)")
    moat_rating = int(input("Enter your moat rating (1-5): "))
    rating += moat_rating

    # Price-to-Earnings (P/E) Ratio
    if price_to_earnings_ratio < 15:
        rating += 2  # Lower P/E is generally better (consider industry averages)

    # Free Cash Flow
    if cash_flow_to_price_ratio > 0.05:
        rating += 1  # Positive cash flow is good

    # Normalize rating to 1-10 scale
    rating = min(rating, 10)  # Limit rating to 10
    return rating

def main():
    # Get user input for financial metrics
    stock_name = input("Enter the stock name: ")
    current_price = get_user_input("Enter the current price per share (<span class="math-inline">\)\: "\)
earnings\_per\_share \= get\_user\_input\("Enter the earnings per share \(</span>): ")
    book_value_per_share = get_user_input("Enter the book value per share ($): ")
    
